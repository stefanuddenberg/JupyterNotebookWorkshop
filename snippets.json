{
    "snippets" : [
        {
            "name" : "Reset and import defaults",
            "code" : [
                "%reset -f",
				"%matplotlib inline",
				"%config InlineBackend.figure_format = 'retina' # High-res graphs (rendered irrelevant by svg option below)",
				"%config InlineBackend.print_figure_kwargs = {'bbox_inches':'tight'} # No extra white space",
				"%config InlineBackend.figure_format = 'svg' # 'png' is default",
				"",
				"import warnings",
				"warnings.filterwarnings('ignore') # Because we are adults",
				"from IPython.core.debugger import set_trace",
                "import matplotlib.pyplot as plt",
                "import numpy as np",
				"import pandas as pd",
				"import seaborn as sns"
            ]
        },
        {
            "name" : "HTML -- Youtube iframe",
            "code" : [
                "%%HTML",
                "<iframe width='560' height='315' src='https://www.youtube.com/embed/HW29067qVWk' frameborder='0' allowfullscreen></iframe>"
            ]
        },
        {
            "name" : "HTML -- generic iframe",
            "code" : [
                "%%HTML",
                "<iframe src='https://fiddle.jshell.net/rahonavis75/ed4486f9/show/' width='800' height='500'>"
            ]
        },
        {
            "name" : "Stats -- Cohen's d",
            "code" : [
                "def cohens_d(t, n):",
    			"    return 2*t / sqrt(n - 2)"
            ]
        },
        {
            "name" : "Stats -- Cohen's d 1-sample",
            "code" : [
                "def cohens_d_1samp(m, sd, test):",
                "    '''",
                "    Return Cohen's d for a one-sample t-test.",
                "    Takes a mean (m), SD (sd), and a test value (test.",
                "    '''",
                "    md = m - test",
                "    return md/sd"
            ]
        },
        {
            "name" : "Stats -- Confidence interval",
            "code" : [
                "def confidence_interval(arr, conf=0.95):",
                "    mean = np.mean(arr, axis=1)",
                "    sem = stats.sem(arr, axis=1)",
                "    tcl = stats.t.ppf((1+conf)/2., max(arr.shape)-1) # for 0.95, needs to be 0.975",
                "    return (mean - tcl*sem, mean + tcl*sem)"
            ]
        },
        {
            "name" : "Formatting tables",
            "code" : [
                "def color_significant_green(val, alpha=0.05):",
                "    if val < alpha: color = 'green'",
                "    else: color = 'black'",
                "    return 'color: %s' % color",
                "",
                "def bold_significant(val, alpha=0.05):",
                "    if val < alpha: font_weight = 'bold'",
                "    else: font_weight = 'normal'",
                "    return 'font-weight: %s' % font_weight"
            ]
        }
    ]
}